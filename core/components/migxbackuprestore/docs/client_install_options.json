[
  {
    "MIGX_id":"1",
    "name":"home",
    "label":"Home",
    "formcode":"        <h3>Benutzung dieses Scripts:<\/h3>\n        <p>Installation:<\/p>\n        <ol>\n            <li>Dieses Script in das Root-Verzeichnis kopieren<\/li>\n            <li>Script aufrufen (Domain\/install.php)<\/li>\n            <li>Schritte der Installation:<\/b>.\n                <ol>\n                    <li>Schritt 1: MODX - Installationsscript herunterladen und MODX installieren<\/li>\n                    <li>Schritt 2: Helferportal-Installation herunterladen<\/li>\n                    <li>Schritt 3: Zip-Archive entpacken<\/li>\n                    <li>Schritt 4: Datenbank aktualisieren<\/li>\n                <\/ol>\n            <\/li>\n        <\/ol>",
    "phpcode":""
  },
  {
    "MIGX_id":"2",
    "name":"installmodx",
    "label":"Install MODX",
    "formcode":"            <form class=\"form-horizontal\" role=\"form\" action=\"?action=installmodx\" method=\"post\">\n                <input type=\"hidden\" name=\"installmodxform\" value=\"1\">\n                MODX Version Master: [[+modx_version]] <br \/>\n                MODX Version Client: [[+client_modx_version]] <br \/>\n                [[+modx_version:is=`[[+client_modx_version]]`:then=`\n                <br \/><br \/>Die Versionen stimmen \u00fcberein\n                `:else=`\n                <div class=\"form-group\">\n                    <div class=\"col-sm-offset-2 col-sm-10\">\n                        <button type=\"submit\" class=\"btn btn-primary\" onclick=\"this.className += 'disabled';\">Install MODX<\/button>\n                    <\/div>\n                <\/div>                \n                `]]\n            <\/form>",
    "phpcode":"            \/\/ download the files\n\n\n            $res = cURLdownload(\"[[++migxbackuprestore.modxinstallerurl]]\", \"installmodx.php\");\n            \/\/$res = cURLdownload($master_domain . \"clientsetup\/installmodx.php.txt\", \"installmodx.php\");\n            \n            if ($res === true){\n                header('Location: installmodx.php?modx='.$modx_version);    \n            }\n           \n            addMessage(\"danger\", 'URL:' . $master_domain . \"clientsetup\/installmodx.php.txt \" . $res); ",
    "downloads":""
  },
  {
    "MIGX_id":"3",
    "name":"download",
    "label":"Download Master",
    "formcode":"            <form class=\"form-horizontal\" role=\"form\" action=\"?action=download\" method=\"post\">\n                <h3>Available Downloads<\/h3>\n                  [[migxLoopCollection:default=`nothing to download`?\n                    &packageName=`migxbackuprestore`\n                    &classname=`mbrSetting`\n                    &where=`{\"id:IN\":[ [[+downloads:replace=`||==,`]] ]}`\n                    &tpl=`mbr_RestoreDownloadlistTpl`\n                ]]\n                <input type=\"hidden\" name=\"downloadform\" value=\"1\">\n                <div class=\"form-group\">\n                    <div class=\"col-sm-offset-2 col-sm-10\">\n                        <button type=\"submit\" class=\"btn btn-primary\" onclick=\"this.className += 'disabled';\">Download Master <\/button>\n                    <\/div>\n                <\/div>\n            <\/form>",
    "phpcode":"\n            \/\/ download the files\n            \n            if (!file_exists($restorefolder)) {\n                mkdir($restorefolder, 0777, true);\n            } \n            file_put_contents($restorefolder . \".htaccess\", \"order deny,allow\" . PHP_EOL . \"deny from all\" . PHP_EOL);            \n\n                [[migxLoopCollection?\n                    &packageName=`migxbackuprestore`\n                    &classname=`mbrSetting`\n                    &where=`{\"id:IN\":[ [[+downloads:replace=`||==,`]] ]}`\n                    &tpl=`mbr_RestoreDownloadCodeTpl`\n                ]]\n            addMessage(\"info\", \"<p>Done. Next Step: Unzip the donwloaded Files<\/p>\"); \n            \/\/addMessage(\"info\", \"<p>On success: Copy the created zip and this script to the root of the new location.<\/p>\");\n            \/\/addMessage(\"warning\", \"<p>Make sure you don't leave this script on the server.<\/p>\");",
    "downloads":[
      "1",
      "2"
    ]
  },
  {
    "MIGX_id":"4",
    "name":"unzip",
    "label":"Unzip",
    "formcode":"<?php\n\n            \/\/ Give Zipform\n            $files = preg_grep('\/^([^.])\/', scandir($restorefolder));\n            $files = is_array($files) ? $files : array();\n            $zipfiles = array();\n            foreach ($files as $file) {\n                if (strtolower(substr($file, -3)) === \"zip\")\n                    $zipfiles[] = $file;\n            }\n\n?>\n            <form class=\"form-horizontal\" role=\"form\" action=\"?action=unzip\" method=\"post\" enctype=\"multipart\/form-data\">\n                <div class=\"form-group\">\n\n                        <?php\n\n            if (count($zipfiles) <= 0) {\n                echo \"<p class=\\\"text-warning\\\">No 'zip'files found in the current directory.<\/p>\";\n            } else {\n                foreach ($zipfiles as $zipfile) {\n                    echo '<div class=\"checkbox\">\n  <label>\n    <input name=\"zipfiles[]\" type=\"checkbox\" value=\"'.$zipfile.'\" checked=\"checked\">' . $zipfile . '\n  <\/label>\n<\/div>';\n                }\n\n            }\n\n?>\n \n                <\/div>\n\n                <div class=\"form-group\">\n                    <div class=\"col-sm-offset-2 col-sm-10\">\n                        <div class=\"checkbox\">\n                            <label>\n                                <input type=\"checkbox\" name=\"unlink\" value=\"1\" checked> <b>Remove zip-files<\/b> after successful extraction.\n                            <\/label>\n                        <\/div>\n                    <\/div>\n                <\/div>\n                <input type=\"hidden\" name=\"[[+name]]form\" value=\"1\">\n                <div class=\"form-group\">\n                    <div class=\"col-sm-offset-2 col-sm-10\">\n                        <button type=\"submit\" class=\"btn btn-primary\" onclick=\"this.className += 'disabled';\">Start Unzip<\/button>\n                    <\/div>\n                <\/div>\n            <\/form>",
    "phpcode":"$base_dir = dirname(__file__) . DIRECTORY_SEPARATOR;\n$core_config_file = $base_dir . 'config.core.php';\n\ninclude ($core_config_file);\n\nif (defined('MODX_CORE_PATH')) {\n    $core_dir = MODX_CORE_PATH;\n} else {\n    $core_dir = dirname(__file__) . DIRECTORY_SEPARATOR . \"core\" . DIRECTORY_SEPARATOR;\n}\n\nif (defined('MODX_CONFIG_KEY')) {\n    $config_key = MODX_CONFIG_KEY;\n} else {\n    $config_key = 'config';\n}\n\n$config_dir = $core_dir . 'config' . DIRECTORY_SEPARATOR;\ninclude ($config_dir . $config_key . '.inc.php');\n\nif (defined('MODX_CONNECTORS_PATH')) {\n    \/\/$conn_config_file = MODX_CONNECTORS_PATH . 'config.core.php';\n    $conn_dir = MODX_CONNECTORS_PATH;\n} else {\n    $conn_dir = dirname(__file__) . DIRECTORY_SEPARATOR . 'connectors' . DIRECTORY_SEPARATOR;\n}\n\nif (defined('MODX_MANAGER_PATH')) {\n    \/\/$man_config_file = MODX_MANAGER_PATH . 'config.core.php';\n    $man_dir = MODX_MANAGER_PATH;\n} else {\n    $man_dir = dirname(__file__) . DIRECTORY_SEPARATOR . 'manager' . DIRECTORY_SEPARATOR;\n}\n\n$htaccess_file = dirname(__file__) . DIRECTORY_SEPARATOR . '.htaccess';\n\/\/copy config-files\nif (file_exists($conn_dir . 'config.core.php')) {\n    copy($conn_dir . 'config.core.php', $conn_dir . 'temp.config.core.php');\n}\nif (file_exists($man_dir . 'config.core.php')) {\n    copy($man_dir . 'config.core.php', $man_dir . 'temp.config.core.php');\n}\nif (file_exists($base_dir . 'config.core.php')) {\n    copy($base_dir . 'config.core.php', $base_dir . 'temp.config.core.php');\n}\nif (file_exists($base_dir . '.htaccess')) {\n    copy($base_dir . '.htaccess', $base_dir . 'temp.htaccess');\n}\nif (file_exists($config_dir . $config_key . '.inc.php')) {\n    copy($config_dir . $config_key . '.inc.php', $config_dir . 'temp.' . $config_key . '.inc.php');\n}\n\nif (isset($_POST['zipfiles']) && is_array($_POST['zipfiles'])) {\n    $destination = '.\/';\n    foreach ($_POST['zipfiles'] as $zipfile) {\n        if (file_exists($restorefolder . $zipfile)) {\n            $file = $restorefolder . $zipfile;\n            if (my_unzip($file, $destination)) {\n\n                addMessage(\"success\", \"<p>Successfully extracted '$file' to '$destination'.<\/p>\");\n                if (isset($_POST['unlink']) && $_POST['unlink'] === \"1\") {\n                    unlink($file);\n                    addMessage(\"success\", \"<p>Successfully removed '$file'.<\/p>\");\n                }\n            } else {\n                addMessage(\"danger\", \"<p>Failed to extract '$file'. Check file(read) and folder(write) permissions.<\/p>\");\n            }\n        } else {\n            addMessage(\"danger\", \"<p>'$zipfile' doesn't exist<\/p>\");\n        }\n    }\n} else {\n    addMessage(\"danger\", \"<p>No valid file for extract process.<\/p>\");\n}\n\n\n\/\/rename old config-files back\nif (file_exists($conn_dir . 'temp.config.core.php')) {\n    rename($conn_dir . 'config.core.php', $conn_dir . 'bkup.config.core.php');\n    rename($conn_dir . 'temp.config.core.php', $conn_dir . 'config.core.php');\n}\nif (file_exists($man_dir . 'temp.config.core.php')) {\n    rename($man_dir . 'config.core.php', $man_dir . 'bkup.config.core.php');\n    rename($man_dir . 'temp.config.core.php', $man_dir . 'config.core.php');\n}\nif (file_exists($base_dir . 'temp.config.core.php')) {\n    rename($base_dir . 'config.core.php', $base_dir . 'bkup.config.core.php');\n    rename($base_dir . 'temp.config.core.php', $base_dir . 'config.core.php');\n}\nif (file_exists($base_dir . 'temp.htaccess')) {\n    rename($base_dir . '.htaccess', $base_dir . 'bkup.htaccess');\n    rename($base_dir . 'temp.htaccess', $base_dir . '.htaccess');\n}\nif (file_exists($config_dir . 'temp.' . $config_key . '.inc.php')) {\n    rename($config_dir . $config_key . '.inc.php', $config_dir . 'bkup.' . $config_key . '.inc.php');\n    rename($config_dir . 'temp.' . $config_key . '.inc.php', $config_dir . $config_key . '.inc.php');\n}\n",
    "downloads":""
  },
  {
    "MIGX_id":"6",
    "name":"dbimport",
    "label":"Import DB",
    "formcode":"<?php\n            addMessage(\"info\", \"<p>The existing database should be empty before submit.<\/p>\");\n\n            \/\/ Scan backup\n            $files = array();\n            if (is_dir(\"mbr-restore-files\/db\"))\n                $files = directoryToArray(\"mbr-restore-files\/db\");\n            $sqlfiles = array();\n            foreach ($files as $file) {\n                if (strtolower(substr($file, -3)) === \"sql\")\n                    $sqlfiles[] = $file;\n            }\n\n?>\n            <form class=\"form-horizontal\" role=\"form\" action=\"?action=dbimport\" method=\"post\" enctype=\"multipart\/form-data\">\n                <div class=\"form-group\">\n                    <label for=\"sqllocation\" class=\"col-sm-2 control-label\">SQL file from disk (prio-1):<\/label>\n                    <div class=\"col-sm-10\">\n                        <?php\n\n            if (count($sqlfiles) <= 0) {\n                echo \"<p class=\\\"text-warning\\\">No 'sql'files found in the 'mbr-restore-files\/db' directory.<\/p>\";\n            } else {\n                echo '<select name=\"sqllocation\" class=\"form-control\">';\n                foreach ($sqlfiles as $sqlfile) {\n                    echo '<option>' . $sqlfile . '<\/option>';\n                }\n                echo '<\/select>';\n            }\n\n?>\n                    <\/div>\n                <\/div>\n                <div class=\"form-group\">\n                    <label for=\"file\" class=\"col-sm-2 control-label\">SQL file from upload (prio-2):<\/label>\n                    <div class=\"col-sm-10\">\n                        <input type=\"file\" class=\"form-control\" name=\"file\" id=\"file\">\n                    <\/div>\n                <\/div>\n                <div class=\"form-group\">\n                    <div class=\"col-sm-offset-2 col-sm-10\">\n                        <div class=\"checkbox\">\n                            <label>\n                                <input type=\"checkbox\" name=\"entry\" value=\"1\" checked> Update `workspaces` table entry (change existing to new core path) after successful import.\n                            <\/label>\n                        <\/div>\n                    <\/div>\n                <\/div>\n                <div class=\"form-group\">\n                    <div class=\"col-sm-offset-2 col-sm-10\">\n                        <div class=\"checkbox\">\n                            <label>\n                                <input type=\"checkbox\" name=\"unlinksql\" value=\"1\" checked> <b>Remove export-db folder<\/b> after successful import.\n                            <\/label>\n                        <\/div>\n                    <\/div>\n                <\/div>\n                <div class=\"form-group\">\n                    <div class=\"col-sm-offset-2 col-sm-10\">\n                        <div class=\"checkbox\">\n                            <label>\n                                <input type=\"checkbox\" name=\"unlinkscript\" value=\"1\" checked> <b>Remove this script<\/b> after successful import.\n                            <\/label>\n                        <\/div>\n                    <\/div>\n                <\/div>\n                <input type=\"hidden\" name=\"[[+name]]form\" value=\"1\">\n                <div class=\"form-group\">\n                    <div class=\"col-sm-offset-2 col-sm-10\">\n                        <button type=\"submit\" class=\"btn btn-primary\" onclick=\"this.className += 'disabled';\">Start Import<\/button>\n                    <\/div>\n                <\/div>\n            <\/form>",
    "phpcode":"                if (isset($_POST['sqllocation']) && file_exists($_POST['sqllocation'])) {\n                    $file = $_POST['sqllocation'];\n                } else\n                    if (!($_FILES[\"file\"][\"error\"] > 0) && file_exists($_FILES[\"file\"][\"tmp_name\"])) {\n                        $file = $_FILES[\"file\"][\"tmp_name\"];\n                        \/\/ @todo create 'export-db' folder and copy uploaded file there\n                    } else {\n                        addMessage(\"danger\", \"<p>No valid file for import process.<\/p>\");\n                        break;\n                    }\n\n                    \/\/ Download bigdump\n                    $res = cURLdownload(\"https:\/\/raw.githubusercontent.com\/voltan\/code\/master\/bigdump\/bigdump.php\", \"bigdump.php\");\n\n\n                if (file_exists(\"bigdump.php\") && $res === true) {\n\n                    \/\/ modify bigdump\n                    require_once \"config.core.php\";\n                    require_once MODX_CORE_PATH . 'config' . DIRECTORY_SEPARATOR . MODX_CONFIG_KEY . '.inc.php';\n\n                    $sr = array(\n                        \"\/db_server\\s*=\\s*'(.*)';\/\" => \"db_server = '$database_server';\",\n                        \"\/db_name\\s*=\\s*'(.*)';\/\" => \"db_name = '$dbase';\",\n                        \"\/db_username\\s*=\\s*'(.*)';\/\" => \"db_username = '$database_user';\",\n                        \"\/db_password\\s*=\\s*'(.*)';\/\" => \"db_password = '$database_password';\",\n                        \"\/filename\\s*=\\s*'(.*)';\/\" => \"filename = '$file';\");\n\n                    $c1 = file_put_contents(\"bigdump.php\", preg_replace(array_keys($sr), array_values($sr), file_get_contents(\"bigdump.php\")));\n                    if ($c1 == false)\n                        addMessage(\"danger\", \"<p>BigDump preparation failed.<\/p>\");\n                    else {\n                        addMessage(\"success\", \"<p>BigDump successfully downloaded and prepared. Use BigDump to import the database.<\/p>\");\n\n                        \/\/ generate finish url\n                        $finish_url = $current_url . \"?\" . http_build_query(array(\n                            \"action\" => $action . \"finished\",\n                            \"entry\" => $_POST['entry'],\n                            \"uexp\" => $_POST['unlinksql'],\n                            \"uscr\" => $_POST['unlinkscript']));\n\n?>\n                    <div class=\"row-fluid\">\n                        <iframe name=\"bigdump\" id=\"bigdump\" class=\"container well well-small span6\"\n                                style=\"height: 400px; background-color: #f5e5c5;\"\n                                src=\"bigdump.php\">\n                        <\/iframe>\n                    <\/div>\n                    <script type=\"application\/javascript\">\n                        $(\"#bigdump\").load(function () {\n                            var start_el = $(\"a:contains('Start Import')\", frames[\"bigdump\"].document),\n                                finish_el = $(\"p:contains('Congratulations: End of file reached, assuming OK')\", frames[\"bigdump\"].document);\n\n                            if (start_el.length > 0) {\n                                $(\"#bigdump\").attr(\"src\", start_el.eq(0).attr('href'));\n                            }\n\n                            if (finish_el.length > 0) {\n                                window.location.href = '<?php\n\n                        echo stripslashes($finish_url)\n\n?>';\n                            }\n                        });\n                    <\/script>\n                <?php\n\n                    }\n\n                } else\n                    addMessage(\"danger\", \"<p>Failed to download BigDump. Import stopped. $res<\/p>\");\n",
    "downloads":""
  },
  {
    "MIGX_id":"7",
    "name":"dbimportfinished",
    "label":"dbimportfinished",
    "formcode":"<?php\n        addMessage(\"success\", \"<p>Database imported successfully.<\/p>\");\n\n        \/\/ Cleanup\n        if (unlink(\"bigdump.php\") == false)\n            addMessage(\"danger\", \"<p>Failed to delete 'bigdump.php'. <b>Security Risk!<\/b> Remove manually.<\/p>\");\n        if (isset($_GET['uexp']) && $_GET['uexp'] == \"1\")\n            if (delTree(dirname(__file__) . DIRECTORY_SEPARATOR . \"export-db\") == false)\n                addMessage(\"warning\", \"<p>Failed to delete 'export-db\/'. Remove manually.<\/p>\");\n            else\n                addMessage(\"success\", \"<p>Successfully deleted 'export-db\/'.<\/p>\");\n        if (isset($_GET['uscr']) && $_GET['uscr'] == \"1\")\n            if (unlink(__file__) == false)\n                addMessage(\"warning\", \"<p>Failed to delete this script. <b>Security Risk!<\/b> Remove manually.\");\n            else\n                addMessage(\"success\", \"<p>Successfully deleted this script.<\/p>\");\n\n        \/\/ Update workspace table (core path in 1 entry)\n        if (isset($_GET['uscr']) && $_GET['uscr'] == \"1\") {\n            \/\/ import required files\n            require_once \"config.core.php\";\n            require_once MODX_CORE_PATH . 'config' . DIRECTORY_SEPARATOR . MODX_CONFIG_KEY . '.inc.php';\n\n            \/\/ change db entry\n            try {\n                $db = new PDO($database_dsn, $database_user, $database_password);\n                $db->exec(\"UPDATE modx_workspaces SET path=\" . sQuote(MODX_CORE_PATH) . \" WHERE id=1;\");\n                addMessage(\"success\", \"<p>Successfully updated `workspace` entry to new core folder.<\/p>\");\n            }\n            catch (PDOException $e) {\n                addMessage(\"danger\", \"<p>Could not update workspace entry due to: Could not connect to mysql server or database.<\/p><p>{$e->getMessage()}<\/p>\");\n                break;\n            }\n            $db = null;\n        }\n\n        \/\/ Next steps\n        addMessage(\"info\", \"<p>If no errors occurred, you can reach <a href=\\\"\" . str_replace(pathinfo(__file__, PATHINFO_BASENAME), \"\", $current_url) . \"\\\">the working modx installation.<\/a><\/p>\");\n?>",
    "phpcode":""
  }
]